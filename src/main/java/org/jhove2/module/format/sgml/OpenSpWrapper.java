/**
 * JHOVE2 - Next-generation architecture for format-aware characterization
 *
 * Copyright (c) 2009 by The Regents of the University of California,
 * Ithaka Harbors, Inc., and The Board of Trustees of the Leland Stanford
 * Junior University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * o Neither the name of the University of California/California Digital
 *   Library, Ithaka Harbors/Portico, or Stanford University, nor the names of
 *   its contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.jhove2.module.format.sgml;


import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.SortedSet;

import org.jhove2.annotation.ReportableProperty;
import org.jhove2.core.JHOVE2Exception;
import org.jhove2.util.externalprocess.ExternalProcessHandler;
import org.jhove2.util.externalprocess.FilepathFilter;

/**
 * Wrapper around OpenSP SGML parser and onsgmlNorm utility. 
 * 
 * After the SGML file is parsed by OpenSp the output (in ESIS format) 
 * is parsed using an ANTLR-generated Java parser class.  The grammar 
 * has been decorated with Java members and methods to accumulate information
 * about the features of interest in the SGML file.  The grammar accepts 
 * the OpenSP indication as to whether or not the SGML instance conforms
 * to its DTD, and hence is to be considered valid.
 * 
 * No DOCTYPE information is returned in the ESIS file.  If the SGML module
 * is configured to ask for doctype, then we run the onsgml "normalization"
 * utility, and extract the doctype from the first line of its output.
 * 
 * @author smorrissey
 *
 */
public class OpenSpWrapper implements SgmlParser {

	/** OpenSp "use catalog" option; followed by path to catalog file for resolving public and system identifiers*/
	public static final String CATALOGOPT = "-c";
	/** OpenSp option to indicate path to errror messages file (would otherwise default to standard err) */
	public static final String ERRFILEOPT = "-f";
	/** options string for onsgml command */
	public static final String ESISCOMMANDPARMS = 
		"-E0 -gnxl -wall -oentity -ocomment -oid -oincluded -ononsgml -onotation-sysid -oomitted -odata-attribute ";
	/** options string for sgmlnorm command */
	public static final String NORMCOMMANDPARMS = 
		"-E0 -gnexmd --error-numbers -wall";
	/** suffix to be used on files generated by onsmgl command */
	public static final String ESIS_SUFFIX = ".esis";
	/** suffix to be used on files generated by sgmlnorm command */
	public static final String NORM_SUFFIX = ".norm";
	/** parser directive: path to catalog file; if empty or null, no catalog is assumed */
	protected String catalogPath;
	/** Handler that will invoke external process to run ongsml utilities */
	protected ExternalProcessHandler processHandler;
	/** filters to be applied to filepaths to enable processing by ExternalProcessHandler on different operating systems*/
	protected FilepathFilter filepathFilter = null;
	/** full path to onsgmls command */
	protected String onsgmlsPath;
	/** ANTLR-generated ESIS file (output from ongmls) parser*/
	protected ESISCommandsParser esisParser;
	/** full path to ESIS (output from ongmls) file */
	protected String esisFilePath;
	/** full path to ESIS (output from ongmls) err file */
	protected String esisErrFilePath;
	/** full path to SGML document */
	protected String sgmFilePath;
	/** full path to sgmlnorm utility */
	protected String sgmlnormPath;
	/** ANTLR-generated grammar to parse output of sgmlnorm command */
	protected DoctypeFinderParser doctypeFinderParser;
	/** full path to output from sgmlnorm command*/
	protected String normOutPath;
	/** full path to error file from sgmlnorm command */
	protected String normErrPath;
	/** list of errors returned by ANTLR-generated parsers */
	protected List<String> parseErrors;
	/**
	 * Invokes onsmgls processor to parse and validate the SGML
	 * source.  Then invokes ANTLR-generated parser to accumulate
	 * feature information about the instance
	 * @param sgm SgmlModule instance invoking this method; module will have 
	 *            Source member
	 * @throws JHOVE2Exception
	 */
	@Override
	public void parseFile(SgmlModule sgm)
	throws JHOVE2Exception {
		if (this.sgmFilePath==null){
			File sgmFile = sgm.source.getFile();
			try {
				this.sgmFilePath = sgmFile.getCanonicalPath();
				if (this.filepathFilter != null){
					this.sgmFilePath = this.filepathFilter.filter(this.sgmFilePath);
				}
			} catch (IOException e) {
				throw new JHOVE2Exception(
						"IO Exception thrown attempting to determine canonical path for SGML source",
						e);
			}
		}
		String [] onsgmlOutputs = this.parseSgmlFile(sgm, ESIS_SUFFIX, this.onsgmlsPath, ESISCOMMANDPARMS);
		this.esisFilePath = onsgmlOutputs[0];
		this.esisErrFilePath = onsgmlOutputs[1];
		EsisParser esisFileParser = new EsisParser();
		this.esisParser = 
			esisFileParser.parseEsisFile(this.esisFilePath);
		if (this.esisParser.getEsisParseErrors() != null){
			if (this.parseErrors == null){
				this.parseErrors = new ArrayList<String>();
			}
			this.parseErrors.addAll(this.esisParser.getEsisParseErrors());
		}
		return;
	}

	/**
	 * Invokes OpenSp sgmlnorm utility to parse the SGML file. If the file can be successfully parsed,
	 * normalized output will contain a DOCTYPE statement
	 * @param sgm SgmlModule instance invoking this method; module will have 
	 *            Source member
	 * @throws JHOVE2Exception
	 */
	@Override
	public void determineDoctype(SgmlModule sgm)
	throws JHOVE2Exception {
		if (this.sgmFilePath==null){
			File sgmFile = sgm.source.getFile();
			try {
				this.sgmFilePath = sgmFile.getCanonicalPath();
				if (this.filepathFilter != null){
					this.sgmFilePath = this.filepathFilter.filter(this.sgmFilePath);
				}
			} catch (IOException e) {
				throw new JHOVE2Exception(
						"IO Exception thrown attempting to determine canonical path for SGML source",
						e);
			}
		}
		String [] normOutputs = this.parseSgmlFile(sgm, NORM_SUFFIX, this.sgmlnormPath, NORMCOMMANDPARMS);
		this.normOutPath = normOutputs[0];
		this.normErrPath =normOutputs[1];
		DoctypeParser doctypeParser = new DoctypeParser();
		this.doctypeFinderParser = 
			doctypeParser.parseNormFile(this.normOutPath);
		if (this.doctypeFinderParser.getDoctypeFinderParseErrors()!=null){
			if (this.parseErrors == null){
				this.parseErrors = new ArrayList<String>();
			}
			this.parseErrors.addAll(this.doctypeFinderParser.getDoctypeFinderParseErrors());
		}
		return;		
	}

	/**
	 * 
	 * @param sgm
	 * @return
	 * @throws JHOVE2Exception
	 */
	protected String[] parseSgmlFile(SgmlModule sgm, String tempFileSuffix, 
			String openSpCommand, String commandParms)
	throws JHOVE2Exception {
		String parseOutputFilePath = null;
		String parseErrFilePath = null;
		File tempOutFile = null;
		File tempErrFile = null;
		if (this.sgmFilePath==null){
			File sgmFile = sgm.source.getFile();
			try {
				this.sgmFilePath = sgmFile.getCanonicalPath();
				if (this.filepathFilter != null){
					this.sgmFilePath = this.filepathFilter.filter(this.sgmFilePath);
				}
			} catch (IOException e) {
				throw new JHOVE2Exception(
						"IO Exception thrown attempting to determine canonical path for SGML source",
						e);
			}
		}
		// create path names for the 2 output (output and err messages)
		// files generated by OpenSp
		try {
			tempOutFile = File.createTempFile(
					sgm.jhove2.getInvocation().getTempPrefix(),
					sgm.jhove2.getInvocation().getTempSuffix().concat(tempFileSuffix), 
					new File(sgm.jhove2.getInvocation().getTempDirectory()));
		} catch (IOException e) {
			throw new JHOVE2Exception(
					"IOException attemtping to create temporary OpenSp output file",
					e);
		}
		if (sgm.jhove2.getInvocation().getDeleteTempFiles()){
			tempOutFile.deleteOnExit();
		}
		parseOutputFilePath = tempOutFile.getPath();
		if (this.filepathFilter != null){
			parseOutputFilePath = this.filepathFilter.filter(parseOutputFilePath);
		}
		try {
			tempErrFile = File.createTempFile(
					sgm.jhove2.getInvocation().getTempPrefix(),
					sgm.jhove2.getInvocation().getTempSuffix().concat(tempFileSuffix).concat(".err"), 
					new File(sgm.jhove2.getInvocation().getTempDirectory()));
		} catch (IOException e) {
			throw new JHOVE2Exception(
					"IOException attemtping to create temporary OpenSp error file",
					e);
		}
		if (sgm.jhove2.getInvocation().getDeleteTempFiles()){
			tempErrFile.deleteOnExit();
		}
		parseErrFilePath = tempErrFile.getPath();
		if (this.filepathFilter != null){
			parseErrFilePath = this.filepathFilter.filter(parseErrFilePath);
		}
		StringBuffer sbCommand = new StringBuffer(openSpCommand);
		sbCommand.append(" ");
		sbCommand.append(commandParms);
		sbCommand.append(" ");
		if (this.getCatalogPath()!= null){
			String filteredCatalogPath =this.getCatalogPath();
			if (this.filepathFilter != null){
				filteredCatalogPath = this.filepathFilter.filter(filteredCatalogPath);
			}
			sbCommand.append(CATALOGOPT);
			sbCommand.append(filteredCatalogPath);
			sbCommand.append(" ");
		}
		sbCommand.append(ERRFILEOPT);
		sbCommand.append(parseErrFilePath);
		sbCommand.append(" ");
		sbCommand.append(this.sgmFilePath);
		sbCommand.append(" > ");
		sbCommand.append(parseOutputFilePath);
		String command = sbCommand.toString();
		this.getProcessHandler().executeCommand(command);
		return new String[]{parseOutputFilePath, parseErrFilePath};
	}

	/**
	 * @return the catalogPath
	 */
	@ReportableProperty(order = 20, value = "Parser setting:  Full path to catalog file")
	public String getCatalogPath() {
		return catalogPath;
	}
	/**
	 * @param catalogPath the catalogPath to set
	 */
	public void setCatalogPath(String catalogPath) {
		this.catalogPath = catalogPath;
	}

	/**
	 * @return the processHandler
	 */
	public ExternalProcessHandler getProcessHandler() {
		return processHandler;
	}
	/**
	 * @param processHandler the processHandler to set
	 */
	public void setProcessHandler(ExternalProcessHandler processHandler) {
		this.processHandler = processHandler;
	}
	/**
	 * @return the onsgmlsPath
	 */
	public String getOnsgmlsPath() {
		return onsgmlsPath;
	}
	/**
	 * @param onsgmlsPath the onsgmlsPath to set
	 */
	public void setOnsgmlsPath(String onsgmlsPath) {
		this.onsgmlsPath = onsgmlsPath;
	}
	/**
	 * @return the filepathFilter
	 */
	public FilepathFilter getFilepathFilter() {
		return filepathFilter;
	}
	/**
	 * @param filepathFilter the filepathFilter to set
	 */
	public void setFilepathFilter(FilepathFilter filepathFilter) {
		this.filepathFilter = filepathFilter;
	}
	/**
	 * @return the esisFilePath
	 */
	public String getEsisFilePath() {
		return esisFilePath;
	}
	/**
	 * @param esisFilePath the esisFilePath to set
	 */
	public void setEsisFilePath(String esisFilePath) {
		this.esisFilePath = esisFilePath;
	}
	/**
	 * @return the esisErrFilePath
	 */
	public String getEsisErrFilePath() {
		return esisErrFilePath;
	}
	/**
	 * @param esisErrFilePath the esisErrFilePath to set
	 */
	public void setEsisErrFilePath(String esisErrFilePath) {
		this.esisErrFilePath = esisErrFilePath;
	}
	/**
	 * @return the sgmFilePath
	 */
	public String getSgmFilePath() {
		return sgmFilePath;
	}
	/**
	 * @param sgmFilePath the sgmFilePath to set
	 */
	public void setSgmFilePath(String sgmFilePath) {
		this.sgmFilePath = sgmFilePath;
	}
	/**
	 * @return the sgmlnormPath
	 */
	public String getSgmlnormPath() {
		return sgmlnormPath;
	}
	/**
	 * @param sgmlnormPath the sgmlnormPath to set
	 */
	public void setSgmlnormPath(String sgmlnormPath) {
		this.sgmlnormPath = sgmlnormPath;
	}
	/**
	 * @return the normOutPath
	 */
	public String getNormOutPath() {
		return normOutPath;
	}
	/**
	 * @param normOutPath the normOutPath to set
	 */
	public void setNormOutPath(String normOutPath) {
		this.normOutPath = normOutPath;
	}
	/**
	 * @return the normErrPath
	 */
	public String getNormErrPath() {
		return normErrPath;
	}
	/**
	 * @param normErrPath the normErrPath to set
	 */
	public void setNormErrPath(String normErrPath) {
		this.normErrPath = normErrPath;
	}

	@Override
	public int getAppInfoCount() {
		if (this.esisParser != null){
			return this.esisParser.appInfoCount;
		}
		else {
			return 0;
		}
	}

	@Override
	public List<String> getAppInfos() {
		if (this.esisParser != null){
			return this.esisParser.appInfos;
		}
		else return null;
	}

	@Override
	public int getCommentsCount() {
		if (this.esisParser != null){
			return this.esisParser.commentsCount;
		}
		else {return 0;}
	}

	@Override
	public int getDataAttrCount() {
		if (this.esisParser != null){
			return this.esisParser.dataAttrCount;
		}
		else {return 0;}
	}

	@Override
	public HashMap<String, Integer> getDataAttributeType2Count() {
		if (this.esisParser != null){
			return this.esisParser.dataAttributeType2Count;
		}
		else {return null;}
	}

	@Override
	public int getDataCount() {
		if (this.esisParser != null){
			return this.esisParser.dataCount;
		}
		else {return 0;}
	}

	@Override
	public HashMap<String, Integer> getElemAttributeType2Count() {
		if (this.esisParser != null){
			return this.esisParser.elemAttributeType2Count;
		}
		else {return null;}
	}

	@Override
	public int getElementAttributeCount() {
		if (this.esisParser != null){
			return this.esisParser.elementAttributeCount;
		}
		else {return 0;}
	}

	@Override
	public int getElementCount() {
		if (this.esisParser != null){
			return this.esisParser.elementCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getElementNames() {
		if (this.esisParser != null){
			return this.esisParser.elementNames;
		}
		else {return null;}
	}

	@Override
	public int getEmptyElementsCount() {
		if (this.esisParser != null){
			return this.esisParser.emptyElementsCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getEntRefNames() {
		if (this.esisParser != null){
			return this.esisParser.entRefNames;
		}
		else {return null;}
	}

	@Override
	public int getEntityFileNamesCount() {
		if (this.esisParser != null){
			return this.esisParser.fileNamesCount;
		}
		else {return 0;}
	}

	@Override
	public int getEntrefCount() {
		if (this.esisParser != null){
			return this.esisParser.entrefCount;
		}
		else {return 0;}
	}

	@Override
	public int getExtDataEntCount() {
		if (this.esisParser != null){
			return this.esisParser.extDataEntCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getExtDataEntNames() {
		if (this.esisParser != null){
			return this.esisParser.extDataEntNames;
		}
		else {return null;}
	}

	@Override
	public SortedSet<String> getExtEntFileNames() {
		if (this.esisParser != null){
			return this.esisParser.extEntFileNames;
		}
		else {return null;}
	}

	@Override
	public HashMap<String, List<String>> getExtEntName2dataAttrNames() {
		if (this.esisParser != null){
			return this.esisParser.extEntName2dataAttrNames;
		}
		else {return null;}
	}

	@Override
	public SortedSet<String> getExtEntSysidNames() {
		if (this.esisParser != null){
			return this.esisParser.extEntSysidNames;
		}
		else {return null;}
	}

	@Override
	public int getExtTextEntCount() {
		if (this.esisParser != null){
			return this.esisParser.extTextEntCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getExtTextEntNames() {
		if (this.esisParser != null){
			return this.esisParser.extTextEntNames;
		}
		else {return null;}
	}

	@Override
	public int getIncludedSubElementsCount() {
		if (this.esisParser != null){
			return this.esisParser.includedSubElementsCount;
		}
		else {return 0;}
	}

	@Override
	public int getIntDataEntCount() {
		if (this.esisParser != null){
			return this.esisParser.intDataEntCount;
		}
		else {return 0;}
	}

	@Override
	public HashMap<String, String> getIntEnt2Type() {
		if (this.esisParser != null){
			return this.esisParser.intEnt2Type;
		}
		else {return null;}
	}

	@Override
	public HashMap<String, String> getInternalDataEntitytName2Value() {
		if (this.esisParser != null){
			return this.esisParser.intEnt2Value;
		}
		else {return null;}
	}

	@Override
	public HashMap<String, Integer> getInternalEntType2Count() {
		if (this.esisParser != null){
			return this.esisParser.intEntType2Count;
		}
		else {return null;}
	}

	@Override
	public int getLinkAttrCount() {
		if (this.esisParser != null){
			return this.esisParser.linkAttrCount;
		}
		else {return 0;}
	}

	@Override
	public HashMap<String, Integer> getLinkAttributeType2Count() {
		if (this.esisParser != null){
			return this.esisParser.linkAttributeType2Count;
		}
		else {return null;}
	}

	@Override
	public int getNotatDefCount() {
		if (this.esisParser != null){	
			return this.esisParser.notatDefCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getNotatNames() {
		if (this.esisParser != null){
			return this.esisParser.notatNames;
		}
		else {return null;}
	}

	@Override
	public int getOmitCommandCount() {
		if (this.esisParser != null){
			return this.esisParser.omitCommandCount;
		}
		else {return 0;}
	}

	@Override
	public List<String> getParseErrors() {
		return this.parseErrors;
	}

	@Override
	public int getProcessingInstructionsCount() {
		if (this.esisParser != null){
			return this.esisParser.piCount;
		}
		else {return 0;}
	}

	@Override
	public List<String> getProcessingInstructions() {
		if (this.esisParser != null){
			return this.esisParser.progInstructions;
		}
		else {return null;}
	}

	@Override
	public SortedSet<String> getPubIds() {
		if (this.esisParser != null){
			return this.esisParser.pubIds;
		}
		else {return null;}
	}

	@Override
	public int getPublicIdCount() {
		if (this.esisParser != null){
			return this.esisParser.publicIdCount;
		}
		else {return 0;}
	}

	@Override
	public String getRootElementName() {
		if (this.esisParser != null){
			return this.esisParser.rootElementName;
		}
		else {return null;}
	}

	@Override
	public int getSDataCount() {
		if (this.esisParser != null){
			return this.esisParser.sDataCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getSdataNames() {
		if (this.esisParser != null){
			return this.esisParser.sdataNames;
		}
		else {return null;}
	}

	@Override
	public int getSubDocCommandCount() {
		if (this.esisParser != null){
			return this.esisParser.subDocCommandCount;
		}
		else {return 0;}
	}

	@Override
	public SortedSet<String> getSubDocCommandNames() {
		if (this.esisParser != null){
			return this.esisParser.subDocCommandNames;
		}
		else {return null;}
	}

	@Override
	public SortedSet<String> getSubDocEntDefNames() {
		if (this.esisParser != null){
			return this.esisParser.subDocEntDefNames;
		}
		else {return null;}
	}

	@Override
	public int getSubDocEntityDefCount() {
		if (this.esisParser != null){
			return this.esisParser.subDocEntityDefCount;
		}
		else {return 0;}
	}

	@Override
	public int getSysidsCount() {
		if (this.esisParser != null){
			return this.esisParser.sysidsCount;
		}
		else {return 0;}
	}

	@Override
	public boolean isSgmlValid() 
	{if (this.esisParser != null){
		return this.esisParser.isSgmlValid;
	}
	else {return false;}
	}


	@Override
	public boolean getDocTypeFound() {
		if (this.doctypeFinderParser != null){
			return this.doctypeFinderParser.foundDoctype;
		}
		else {return false;}
	}

	@Override
	public String getPublicIdentifier() {
		if (this.doctypeFinderParser != null){
			return this.doctypeFinderParser.pubid;
		}
		else {return null;}
	}

	@Override
	public boolean getPublicIdentifierFound() {
		if (this.doctypeFinderParser != null){
			return this.doctypeFinderParser.foundPubid;
		}
		else {return false;}
	}

	@Override
	public String getSystemIdentifier() {
		if (this.doctypeFinderParser != null){
			return this.doctypeFinderParser.systemId;
		}
		else {return null;}
	}

	@Override
	public boolean getSystemIdentifierFound() {
		if (this.doctypeFinderParser != null){
			return this.doctypeFinderParser.foundSysid;
		}
		else {return false;}
	}

}