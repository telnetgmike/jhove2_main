/**
 * JHOVE2 - Next-generation architecture for format-aware characterization
 *
 * Copyright (c) 2009 by The Regents of the University of California,
 * Ithaka Harbors, Inc., and The Board of Trustees of the Leland Stanford
 * Junior University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * o Neither the name of the University of California/California Digital
 *   Library, Ithaka Harbors/Portico, or Stanford University, nor the names of
 *   its contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.jhove2.module.format.sgml;

import java.util.HashMap;
import java.util.List;
import java.util.SortedSet;

import org.jhove2.core.JHOVE2Exception;

/**
 * Interface to wrap actual parser of SGML file
 * @author smorrissey
 *
 */
public interface SgmlParser {
	/**
	 * Parses SGML document and extracts significant properties
	 * @param sgm SgmlModule with Source object representing SGML document
	 * @throws JHOVE2Exception
	 */
	public void parseFile(SgmlModule sgm)
	throws JHOVE2Exception;
	/**
	 * Determine doctype of SGML document
	 * @param sgm SgmlModule with Source object representing SGML document
	 * @throws JHOVE2Exception
	 */
	public void determineDoctype(SgmlModule sgm)
	throws JHOVE2Exception;
	/**
	 * @return the docTypeFound
	 */
	public boolean getDocTypeFound() ;
	/**
	 * @return the rootElementName
	 */
	public String getRootElementName() ;
	/**
	 * @return the isSgmlValid
	 */
	public boolean isSgmlValid() ;
	/**
	 * @return boolean indicating if public identifier for SGML document was found
	 */
	public boolean getPublicIdentifierFound();
	/**
	 * @return String containing public identifier for SGML document was found, else null
	 */
	public String getPublicIdentifier();
	/**
	 * @return boolean indicating if system identifier for SGML document was found
	 */
	public boolean getSystemIdentifierFound();
	/**
	 * @return String containing system identifier for SGML document was found, else null
	 */
	public String getSystemIdentifier();
	/**
	 * @return the publicIdCount
	 */
	public int getPublicIdCount();

	/**
	 * @return the Count of system (file) identifiers associated with notations or external, 
	 * text, or subdoc entities, generated by the entity manager from the specified external 
	 * identifier and other information about the entity or notation
	 */
	public int getEntityFileNamesCount() ;

	/**
	 * @return Count of system identifiers associated with notations or external, text, or subdoc entities
	 */
	public int getSysidsCount() ;
	/**
	 * @return  Count of external SGML text entities
	 */
	public int getExtTextEntCount();
	/**
	 * @return the notatDefCount
	 */
	public int getNotatDefCount();
	/**
	 * @return the Count of  external data entity definitions
	 */
	public int getExtDataEntCount();
	/**
	 * @return the Count of external data entity references
	 */
	public int getEntrefCount();
	/**
	 * @return Count of internal data entity definitions
	 */
	public int getIntDataEntCount() ;
	/**
	 * @return Count of sub-document entity definitions
	 */
	public int getSubDocEntityDefCount();
	/**
	 * @return Count of SGML subdocument entities
	 */
	public int getSubDocCommandCount() ;
	/**
	 * @return the Count of omitted start-tag, end-tag, or attribue markup instances
	 */
	public int getOmitCommandCount();
	/**
	 * @return the Count of attributes associated with elements
	 */
	public int getElementAttributeCount();

	/**
	 * @return Count of data attributes for a external entities
	 */
	public int getDataAttrCount() ;
	/**
	 * @return Count of link attributes associated with elements
	 */
	public int getLinkAttrCount();
	/**
	 * @return Count of elements in SGML document
	 */

	public int getElementCount() ;
	/**
	 * @return Count of element data content
	 */
	public int getDataCount() ;
	/**
	 * @return Count of included subelements
	 */

	public int getIncludedSubElementsCount();
	/**
	 * @return Count of empty elements
	 */
	public int getEmptyElementsCount();
	/**
	 * @return the commentsCount
	 */
	public int getCommentsCount();

	/**
	 * @return Count of internal SDATA entities
	 */
	public int getSDataCount() ;
	/**
	 * @return Count of processing instructions
	 */
	public int getProcessingInstructionsCount();
	/**
	 * @return ount of APPINFO declared in DTD, and appearing in the text
	 */
	public int getAppInfoCount();

	/**
	 * @return Public identifiers associated with notations or external, text, or subdoc entities
	 */
	public SortedSet<String> getPubIds();
	/**
	 * @return the System (file) identifiers associated with notations or external, text, 
	 * or subdoc entities, generated by the entity manager from the specified external 
	 * identifier and other information about the entity or notation
	 */
	public SortedSet<String> getExtEntFileNames();

	/**
	 * @return System identifiers associated with notations or external, text, or subdoc entities
	 */
	public SortedSet<String> getExtEntSysidNames();
	/**
	 * @return External SGML text entity names
	 */
	public SortedSet<String> getExtTextEntNames();
	/**
	 * @return the Notation names
	 */
	public SortedSet<String> getNotatNames();
	/**
	 * @return External SGML data entity names
	 */
	public SortedSet<String> getExtDataEntNames();
	/**
	 * @return Names of external data entities referenced in SGML document
	 */
	public SortedSet<String> getEntRefNames();
	/**
	 * @return Names of defined sub-document entities
	 */
	public SortedSet<String> getSubDocEntDefNames();
	/**
	 * @return Names of defined sub-document entities appearing in SGML document
	 */
	public SortedSet<String> getSubDocCommandNames() ;
	/**
	 * @return theUnique names of elements appearing in SGML document
	 */
	public SortedSet<String> getElementNames();
	/**
	 * @return the Unique SDATA entity names for SDATA entities appearing in SGML document
	 */

	public SortedSet<String> getSdataNames();
	/**
	 * @return the Map from internal data entity name to entity value
	 */
	public HashMap<String, String> getInternalDataEntitytName2Value();
	/**
	 * @return Map from internal data entity name to entity type
	 */
	public HashMap<String, String> getIntEnt2Type();
	/**
	 * @return the Map from internal data entity types to count of that type in document
	 */
	public HashMap<String, Integer> getInternalEntType2Count();
	/**
	 * @return the Map from element attribute types to count of that type in document
	 */
	public HashMap<String, Integer> getElemAttributeType2Count();

	/**
	 * @return the Map from external entity data attribute types to count of that type in document
	 */
	public HashMap<String, Integer> getDataAttributeType2Count();
	/**
	 * @return the Map from link attribute types to count of that type in document
	 */
	public HashMap<String, Integer> getLinkAttributeType2Count() ;

	/**
	 * @return the Map from external entity name to data attribute names associated with entity in SGML document
	 */
	public HashMap<String, List<String>> getExtEntName2dataAttrNames() ;
	/**
	 * @return the Processing instructions in SGML document
	 */
	public List<String> getProcessingInstructions();

	/**
	 * @return the APPINFOs in SGML document
	 */
	public List<String> getAppInfos() ;
	/**
	 * @return List of parser errors
	 */
	public List<String> getParseErrors();

}
